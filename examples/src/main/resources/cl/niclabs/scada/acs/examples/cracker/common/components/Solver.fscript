function contains-name(slaveName, slaves) {
    for slave : $slaves {
        if ($slaveName == name($slave)) {
            return true();
        }
    }
    return false();
}

function get-next-available-name(slaves) {
    if (contains-name("Slave0", $slaves)) {
        return "Slave0";
    }
    if (contains-name("Slave1", $slaves)) {
        return "Slave1";
    }
    if (contains-name("Slave2", $slaves)) {
        return "Slave2";
    }
    if (contains-name("Slave3", $slaves)) {
        return "Slave3";
    }
    if (contains-name("Slave4", $slaves)) {
        return "Slave4";
    }
    if (contains-name("Slave5", $slaves)) {
        return "Slave5";
    }
    if (contains-name("Slave6", $slaves)) {
        return "Slave6";
    }
    if (contains-name("Slave7", $slaves)) {
        return "Slave7";
    }
}

action add-slave(solver, maxNumOfSlaves, herculesApp) {

    slaves = $solver/child::*[starts-with(name(.), "Slave")];

    if (size($slaves) < $maxNumOfSlaves) {

        slave = gcm-new("cl.niclabs.scada.acs.examples.cracker.common.components.Slave", $herculesApp);
        set-name($slave, get-next-available-name($slaves));

        stop($solver);
        add($solver, $slave);
        bind($solver/child::Master/interface::multicast-slave-itf, $slave/interface::slave-itf);
        set-value($solver/child::Master/attribute::partitionsNumber, size($slaves) + 1);
        start($solver);

        return true();
    }

    return false();
}

function slaves-number(solver) {
    return size($solver/child::*[starts-with(name(.), "Slave")]);
}
